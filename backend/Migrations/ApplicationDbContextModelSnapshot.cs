// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projet_1.Data;

#nullable disable

namespace projet_1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projet_1.Models.Consultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateConsultation")
                        .HasColumnType("datetime2");

                    b.Property<int>("DossierMedicalId")
                        .HasColumnType("int");

                    b.Property<string>("Historique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DossierMedicalId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("projet_1.Models.DossierMedical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Antecedents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupeSanguin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedecinId")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Poids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taille")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Traitements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedecinId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("DossierMedical");
                });

            modelBuilder.Entity("projet_1.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnvoi")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnvoyeurId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceveurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnvoyeurId");

                    b.HasIndex("ReceveurId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("projet_1.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateNotification")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Reciver")
                        .HasColumnType("int");

                    b.Property<int?>("Sender")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Reciver");

                    b.HasIndex("Sender");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("projet_1.Models.RendezVous", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionRdv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Etat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedecinId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedecinId");

                    b.HasIndex("PatientId");

                    b.ToTable("RendezVous");
                });

            modelBuilder.Entity("projet_1.Models.Traitement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomTraitement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultationId");

                    b.ToTable("Traitements");
                });

            modelBuilder.Entity("projet_1.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AjoutePar")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Specialite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("projet_1.Models.Consultation", b =>
                {
                    b.HasOne("projet_1.Models.DossierMedical", "DossierMedical")
                        .WithMany()
                        .HasForeignKey("DossierMedicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projet_1.Models.Utilisateur", "Utilisateur")
                        .WithMany("Consultations")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DossierMedical");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("projet_1.Models.DossierMedical", b =>
                {
                    b.HasOne("projet_1.Models.Utilisateur", "Medecin")
                        .WithMany("DossierMedicalMedecin")
                        .HasForeignKey("MedecinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("projet_1.Models.Utilisateur", "Patient")
                        .WithMany("DossierMedicalPatient")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("projet_1.Models.Utilisateur", null)
                        .WithMany("DossiersMedicaux")
                        .HasForeignKey("UtilisateurId");

                    b.Navigation("Medecin");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("projet_1.Models.Message", b =>
                {
                    b.HasOne("projet_1.Models.Utilisateur", "Envoyeur")
                        .WithMany("MessagesEnvoyes")
                        .HasForeignKey("EnvoyeurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("projet_1.Models.Utilisateur", "Receveur")
                        .WithMany("MessagesRecus")
                        .HasForeignKey("ReceveurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Envoyeur");

                    b.Navigation("Receveur");
                });

            modelBuilder.Entity("projet_1.Models.Notification", b =>
                {
                    b.HasOne("projet_1.Models.Utilisateur", "Patient")
                        .WithMany("NotificationPatient")
                        .HasForeignKey("Reciver")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("projet_1.Models.Utilisateur", "Medecin")
                        .WithMany("NotificationMedecin")
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("projet_1.Models.Utilisateur", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UtilisateurId");

                    b.Navigation("Medecin");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("projet_1.Models.RendezVous", b =>
                {
                    b.HasOne("projet_1.Models.Utilisateur", "Medecin")
                        .WithMany("RendezVousMedecin")
                        .HasForeignKey("MedecinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("projet_1.Models.Utilisateur", "Patient")
                        .WithMany("RendezVousPatient")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medecin");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("projet_1.Models.Traitement", b =>
                {
                    b.HasOne("projet_1.Models.Consultation", "Consultation")
                        .WithMany("Traitements")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultation");
                });

            modelBuilder.Entity("projet_1.Models.Consultation", b =>
                {
                    b.Navigation("Traitements");
                });

            modelBuilder.Entity("projet_1.Models.Utilisateur", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("DossierMedicalMedecin");

                    b.Navigation("DossierMedicalPatient");

                    b.Navigation("DossiersMedicaux");

                    b.Navigation("MessagesEnvoyes");

                    b.Navigation("MessagesRecus");

                    b.Navigation("NotificationMedecin");

                    b.Navigation("NotificationPatient");

                    b.Navigation("Notifications");

                    b.Navigation("RendezVousMedecin");

                    b.Navigation("RendezVousPatient");
                });
#pragma warning restore 612, 618
        }
    }
}
